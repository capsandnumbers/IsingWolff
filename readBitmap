#include <iostream>
#include <fstream>
#include <vector>

#pragma pack(push, 1)

struct BMPHeader {
    char signature[2];    // Signature "BM"
    uint32_t fileSize;     // Size of the BMP file
    uint16_t reserved1;    // Reserved
    uint16_t reserved2;    // Reserved
    uint32_t dataOffset;   // Offset to the start of image data
    uint32_t headerSize;   // Size of the header
    int32_t width;         // Width of the image
    int32_t height;        // Height of the image
    uint16_t planes;       // Number of color planes
    uint16_t bitsPerPixel; // Bits per pixel (usually 1, 4, 8, 24, or 32)
    uint32_t compression;  // Compression type (0 for uncompressed)
    uint32_t dataSize;     // Size of the raw image data
    int32_t horizontalResolution; // Horizontal resolution (pixels per meter)
    int32_t verticalResolution;   // Vertical resolution (pixels per meter)
    uint32_t colors;       // Number of colors in the palette (0 for full color)
    uint32_t importantColors; // Number of important colors (0 means all are important)
};

#pragma pack(pop)

std::vector<std::vector<uint32_t>> readBMP(const std::string& filename) {
    BMPHeader header;
    std::ifstream bmpFile(filename, std::ios::in | std::ios::binary);

    if (!bmpFile) {
        std::cerr << "Error: Cannot open BMP file." << std::endl;
        return {};
    }

    // Read the BMP header
    bmpFile.read(reinterpret_cast<char*>(&header), sizeof(header));

    if (header.signature[0] != 'B' || header.signature[1] != 'M') {
        std::cerr << "Error: Not a BMP file." << std::endl;
        return {};
    }

    if (header.bitsPerPixel != 1) {
        std::cerr << "Error: Unsupported bits per pixel. Only 1-bit BMPs are supported." << std::endl;
        return {};
    }

    int width = header.width;
    int height = header.height;
    int rowWidth = (width + 31) / 32 * 4; // Each row is a multiple of 4 bytes

    std::vector<std::vector<uint32_t>> image(height, std::vector<uint32_t>(width, 0));

    // Read the pixel data (bottom-up)
    for (int y = height - 1; y >= 0; --y) {
        for (int x = 0; x < width; ++x) {
            uint8_t pixel;
            bmpFile.read(reinterpret_cast<char*>(&pixel), 1);
            image[y][x] = (pixel == 0x00) ? 0 : 1; // 0 for black, 1 for white
        }

        // Skip any padding in the row
        for (int padding = rowWidth - width; padding > 0; --padding) {
            uint8_t paddingByte;
            bmpFile.read(reinterpret_cast<char*>(&paddingByte), 1);
        }
    }

    bmpFile.close();

    return image;
}

int main() {
    std::string filename = "example.bmp"; // Change this to your BMP file's path

    std::vector<std::vector<uint32_t>> image = readBMP(filename);

    if (!image.empty()) {
        // Process the image data here
        // For example, you can print the image dimensions
        int width = image[0].size();
        int height = image.size();
        std::cout << "Image dimensions: " << width << "x" << height << std::endl;
    }

    return 0;
}
